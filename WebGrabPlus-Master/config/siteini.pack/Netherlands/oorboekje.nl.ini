**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: oorboekje.nl
* @MinSWversion: V1.1.1/55
* @Revision 0 - [29/10/2014] Francis De Paemeleere
*     - creation
* @Remarks:
* @header_end
**------------------------------------------------------------------------------------------------
*
site {url=oorboekje.nl|timezone=Europe/Amsterdam|maxdays=7|cultureinfo=nl-NL|charset=iso-8859-1|titlematchfactor=90|keepindexpage}
site {nopageoverlaps}

urldate.format {weekdaynumber|7}
url_index{url|http://www.oorboekje.nl/program.php?dag=|urldate}
url_index.modify {replace|0|7}
url_index.headers 	  {customheader=Accept-Encoding=gzip,deflate}     * to speedup the downloading of the index pages

index_variable_element.modify {addstart(scope=datelogo)|'config_site_id'}
index_showsplit.scrub {multi|href="stream.php?zender='index_variable_element'"||<!-- programmablok eind -->|<!-- programmablok eind -->} * srub all days separately

scope.range {(splitindex)|end}

* loop each day
loop {(each 'index_temp_6' in 'index_showsplit')|end}
* first remove any trailing shows (repeated shows for the hole day)
* start at the first correct show
index_temp_6.modify {substring(type=regex)|'index_temp_6' "^.*?(class="pgProgOmschr"[^>]*?style="text-indent: -16px;[^>]*?>.*)$"}
* then make sure the first show doesn't has an end time
index_temp_6.modify {remove(type=regex)|'index_temp_6' "^class="pgProgOmschr"[^>]*?style="text-indent: -16px;[^>]*?>\s*[0-2]\d:\d\d\s*(-\s*[0-2]\d:\d\d\s*).*$"}
* split the days into shows
index_temp_1.modify {substring(type=regex)|'index_temp_6' "class="pgProgOmschr"[^>]*style="text-indent: -16px;[^>]*>\s*(.*?)</DIV>"}
* remove all shows that are like 00:00-07:00, the daysplit is at 06:00.
* shows that are still running at 06:00, or just until, will be listed in the next day, so we can remove them
index_temp_1.modify {remove(type=regex)|^[0-2]\d:\d\d\s*-\s*[1-2].*$}   * remove shows that end after 10:00
index_temp_1.modify {remove(type=regex)|^[0-2]\d:\d\d\s*-\s*0[6-9].*$} 	* remove shows that end after 06:00
* remove any end time, so we can remove duplicate shows (only on a daily basis!)
index_temp_1.modify {remove(type=regex)|^[0-2]\d:\d\d([^>]*)<B>}
index_temp_1.modify {cleanup(removeduplicates=equal,100 span=1)}

* if only one show exists, just create a second copy of the show, that starts at 23:59 (is needed by WG++ currently)
index_temp_2.modify {calculate(type=element format=F0)|'index_temp_1' #}
index_temp_3.modify {clear}
index_temp_3.modify {substring('index_temp_2'=="1" type=element)|'index_temp_1' 0 1}	* get the first (and only element)
index_temp_3.modify {replace(type=regex)|"^([0-2]\d:\d\d)"|23:59}						* replace its startitme with 23:59

index_temp_1.modify {replace|\||##_##}		* make single(to append)
index_temp_1.modify {addend('index_temp_2'=="1")|##_##'index_temp_3'}					* if one show, just at the dummy one

index_temp_5.modify{addend|'index_temp_1'##_##}
index_temp_6.modify {clear}
end_loop

index_showsplit.modify {clear}
index_showsplit.modify {addstart|'index_temp_5'}
index_showsplit.modify {replace|##_##|\|}		* make multi again

end_scope



index_start.scrub {regex||^([0-2]\d:\d\d)[^>]*<B>||}
index_title.scrub {regex||^[0-2]\d:\d\d[^>]*<B>\s*(.*?)\s*</B>||}
index_description.scrub {regex||^[0-2]\d:\d\d[^>]*<B>[^>]*</B>(.*)||}
index_description.modify {remove(type=regex)|<.*?>}

index_presenter.scrub {regex||(Presentatie:\s*[^\.]*\.)||}
index_description.modify {remove|'index_presenter'} * remove any presenter info
index_presenter.modify {substring(type=regex)|Presentatie:\s*([^\.]*)}
index_presenter.modify {replace(type=regex)|( en \| & \| / \|,)|\|}

index_category.scrub {single|<IMG|title="|"|>}
index_previousshown.modify {addstart('index_category' ~ "herhaling")|true}
index_category.modify {clear(~ "herhaling")}

index_description.modify {cleanup}

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index{url|http://www.oorboekje.nl/program.php?dag=1}
*index_site_channel.scrub {regex||class="pgMenuKop".*?href="stream\.php\?zender=\d*[^>]*>(.*?)</DIV>||}
*index_site_id.scrub {regex||class="pgMenuKop".*?href="stream\.php\?zender=(\d*)[^>]*>.*?</DIV>||}
*scope.range {(channellist)|end}
*index_site_channel.modify {remove(type=regex)|<.*?>}
*index_site_channel.modify {remove(type=regex)|^\s*}
*index_site_channel.modify {remove(type=regex)|\s*$}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end

